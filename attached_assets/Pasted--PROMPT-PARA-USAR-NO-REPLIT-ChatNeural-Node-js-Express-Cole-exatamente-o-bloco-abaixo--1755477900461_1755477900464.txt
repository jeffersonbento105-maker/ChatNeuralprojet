# PROMPT PARA USAR NO REPLIT ‚Äî ChatNeural (Node.js + Express)

> **Cole exatamente o bloco abaixo na IA do Replit** para gerar o projeto completo, j√° estruturado e pronto para rodar.

```
Crie um projeto completo chamado **ChatNeural** usando **Node.js + Express + HTML/CSS/JS** (sem TypeScript, sem build step). Gere **todo o c√≥digo** organizado e pronto para rodar no Replit.

OBJETIVO
Um app web de chatbot moderno com alternador entre dois assistentes (Clark e Ragnaria), interface em bolhas de conversa e um painel lateral para gerar e-mails profissionais com IA.

PADR√ïES E DEPLOY (Replit 2025)
- Node 18+ (usar fetch nativo do Node 18; n√£o usar axios por padr√£o).
- Porta: `process.env.PORT || 3000`.
- Script no package.json: `"start": "node server.js"`.
- Projeto deve iniciar clicando em **Run** no Replit, sem ajustes manuais.
- Instruir no README a criar o Secret **OPENAI_API_KEY** no Replit.

ESTRUTURA DE PASTAS
- `server.js` ‚Äî servidor Express, rotas e integra√ß√£o OpenAI.
- `public/` ‚Äî assets est√°ticos
  - `index.html` ‚Äî UI principal (chat + painel de e-mail + seletor de assistente)
  - `app.js` ‚Äî l√≥gica do chat (hist√≥rico curto, chamadas √† API, estados)
  - `styles.css` ‚Äî tema, bolhas, responsividade e anima√ß√µes
- `views/` ‚Äî **(opcional)** vazio, apenas para manter padr√£o
- `package.json` ‚Äî depend√™ncias e scripts
- `README.md` ‚Äî instru√ß√µes r√°pidas de uso no Replit

NOME & BRANDING
- T√≠tulo, cabe√ßalho e metadados do app devem usar o nome **ChatNeural**.
- Favicon simples (pode gerar via emoji üí¨ ou √≠cone SVG minimalista).

ASSISTENTES (alternador)
- Um **dropdown** vis√≠vel no topo para escolher entre **Clark** e **Ragnaria**.
- O assistente selecionado define o **system prompt** enviado √† API:
  - **Clark (PT-BR)**: "Voc√™ √© o Clark, anal√≠tico, objetivo, educativo; responda com clareza e passo-a-passo quando √∫til; use listas numeradas; m√°ximo 1 emoji por resposta."
  - **Ragnaria (PT-BR)**: "Voc√™ √© a Ragnaria, criativa e acolhedora; traga ideias e exemplos; use linguagem leve; at√© 2‚Äì3 emojis quando fizer sentido."
- Vers√µes equivalentes em **EN** devem ser embutidas e selecionadas automaticamente quando o usu√°rio estiver em ingl√™s.

AUTO-DETEC√á√ÉO DE IDIOMA
- Detectar automaticamente PT-BR ou EN a partir da entrada do usu√°rio e responder no mesmo idioma.
- Mensagens de UI (placeholders, bot√µes) devem acompanhar o idioma detectado quando poss√≠vel (ex.: "Enviar/Send", "Pensando‚Ä¶/Thinking‚Ä¶").

INTERFACE EM BOLHAS (UX moderno)
- Layout estilo apps de chat: bolhas do **usu√°rio √† direita** e da **IA √† esquerda**.
- Cabe√ßalho com nome **ChatNeural**, seletor de assistente e indicador de status (online / digitando‚Ä¶).
- Barra de entrada: textarea que envia com **Enter** e bot√£o **Enviar**. Suporte a Shift+Enter para nova linha.
- Mostrar estado **‚Äúdigitando‚Ä¶‚Äù** da IA com anima√ß√£o de tr√™s pontos.
- √çcones pequenos para status: ‚úîÔ∏è (sucesso), ‚ö†Ô∏è (aviso), ‚ùå (erro).
- **Toasts** de sucesso/erro simples (sem libs pesadas; use HTML/CSS/JS puro).
- Acessibilidade: labels, `aria-live="polite"` para o status e foco gerenci√°vel no input.

DESIGN VISUAL (bonito como refer√™ncia anterior)
- Usar **Bootstrap 5 via CDN** para grid e resets.
- Criar um **tema autoral** em `styles.css` com:
  - **Glassmorphism** sutil (fundo blur + transpar√™ncia leve) no container principal.
  - **Gradiente suave** no topo (ex.: roxo‚Üíazul) e **cores past√©is** nas bolhas.
  - **Cantos 2xl** e **sombras suaves** em cards e bot√µes.
  - **Microanima√ß√µes** em hover/focus e na apari√ß√£o das mensagens (keyframes CSS, sem bibliotecas).
  - Responsivo: √≥timo em mobile (320px+) e desktop amplo.

GERADOR DE E-MAILS (painel lateral)
- Um bot√£o destacado **‚ÄúGerar E-mail / Generate Email‚Äù** que abre um **painel/aside** acess√≠vel.
- Conte√∫do do painel: t√≠tulo, `textarea`, seletor de tom (Formal/Neutro/Amig√°vel) e bot√£o **Gerar**.
- Resultado com **bot√µes de Copy e Regenerate**.
- Usa idioma detectado do prompt do usu√°rio, mas permite escolher manualmente.

HIST√ìRICO CURTO (cliente)
- Manter no **frontend** os √∫ltimos **5 turnos** `{role, content}` e enviar junto a cada chamada.
- N√£o usar banco; apenas mem√≥ria do cliente.

ENDPOINTS EXPRESS
- `POST /api/chat` recebe `{ assistant: "Clark"|"Ragnaria", message: string, history?: [{role, content}] }` e retorna `{ reply }`.
- `POST /api/email` recebe `{ prompt: string, tone?: "formal"|"neutral"|"friendly", lang?: "pt"|"en" }` e retorna `{ email }`.
- `GET /api/health` retorna `{ status: "ok", app: "ChatNeural" }`.
- Tratar erros comuns (sem chave, rate limit) com mensagens amig√°veis no mesmo idioma detectado.

OPENAI (chamadas)
- Ler a chave de `process.env.OPENAI_API_KEY` (n√£o hardcode).
- Usar **`fetch` nativo do Node 18** com a API **Responses** compat√≠vel (modelo: `gpt-4o-mini`).
- Montar o payload com `messages: [ {role: "system", content: systemPrompt}, ...history, {role: "user", content: message} ]`.
- Para o gerador de e-mails, usar um **system prompt** espec√≠fico para e-mails profissionais (PT/EN) e um **user prompt** com as instru√ß√µes do usu√°rio + tom desejado.

ARQUIVOS QUE VOC√ä DEVE ENTREGAR
1) `server.js` ‚Äî Express + rotas acima + CORS simples + serve `public/`
2) `public/index.html` ‚Äî UI completa (chat + painel lateral de e-mail + seletor Clark/Ragnaria)
3) `public/app.js` ‚Äî l√≥gica do chat, hist√≥rico curto, chamadas √† API, estado "digitando‚Ä¶", toasts e copy
4) `public/styles.css` ‚Äî tema bonito com glassmorphism, gradientes, cantos 2xl, sombras e anima√ß√µes
5) `package.json` ‚Äî com `"start": "node server.js"`
6) `README.md` ‚Äî passos r√°pidos Replit (adicionar `OPENAI_API_KEY`, clicar Run)

EXTRAS DE QUALIDADE
- Placeholder inicial com dica (PT/EN): exemplo de pergunta.
- Spinner de carregamento com texto **‚ÄúPensando‚Ä¶ / Thinking‚Ä¶‚Äù**.
- Prevenir envios m√∫ltiplos enquanto processa.
- Limpar input ap√≥s envio e rolar a √°rea de chat para a √∫ltima mensagem.

IMPORTANTE
- **Entregue o c√≥digo completo** e funcional (sem trechos omitidos).
- Sem TypeScript, Webpack, Vite ou Babel. Somente **Node + Express + HTML/CSS/JS puros**.
- Sem depend√™ncias pesadas de UI; apenas Bootstrap 5 via CDN e CSS pr√≥prio.
```

---

## PROMPT LITE (mais simples, ainda bonito e com menos chances de erro)

> Use este se quiser algo **mais enxuto**, mantendo ChatNeural, alternador Clark/Ragnaria e gerador de e-mails, mas com menos efeitos visuais.

```
Crie um projeto chamado **ChatNeural** com **Node.js + Express + HTML/CSS/JS** puro, pronto para rodar no Replit.

Requisitos m√≠nimos e est√°veis:
- `server.js` com Express, CORS, est√°tico de `public/`, porta `process.env.PORT || 3000`.
- Endpoints: `POST /api/chat`, `POST /api/email`, `GET /api/health` (mesmo contrato do prompt completo).
- `public/index.html` com layout de chat em bolhas (usu√°rio direita, IA esquerda), seletor Clark/Ragnaria, campo de entrada e bot√£o Enviar.
- `public/app.js` com hist√≥rico curto (5 turnos), indicador ‚Äúdigitando‚Ä¶‚Äù, fetch para as rotas e toasts simples.
- `public/styles.css` com tema limpo e responsivo (sem glassmorphism; apenas bordas arredondadas, sombras leves, espa√ßamento bom).
- Auto-detec√ß√£o de idioma PT-BR/EN baseada na mensagem do usu√°rio.
- Bot√£o **Generate Email** que abre um modal simples com `textarea`, bot√£o **Gerar**, e resultado com bot√£o **Copy**.
- OpenAI via `fetch` nativo (modelo `gpt-4o-mini`), chave em `process.env.OPENAI_API_KEY`.
- `package.json` com `"start": "node server.js"` e `README.md` explicando como setar o Secret no Replit.
- Entregar **c√≥digo completo** sem omiss√µes e sem TypeScript.
```
